"use client"

import { useSearchParams } from "next/navigation"
import { useEffect, useState } from "react"
import Link from "next/link"
import { ArrowLeft, Download, Share2, Printer } from "lucide-react"
import { getFaceShapeRecommendations } from "@/utils/face-detection"
import { useToast } from "@/components/toast-provider"

export default function ResultsPage() {
  const searchParams = useSearchParams()
  const faceShape = searchParams.get("faceShape") || "Oval"
  const analysisType = searchParams.get("type") || "simple"
  const [loading, setLoading] = useState(true)
  const [recommendations, setRecommendations] = useState<any>(null)
  const { addToast } = useToast()

  useEffect(() => {
    // Check if we have a result parameter, if not redirect to analyzer
    if (!searchParams.get("result")) {
      window.location.href = "/analyzer"
      return
    }

    // Get recommendations for the detected face shape
    const faceShapeRecommendations = getFaceShapeRecommendations(faceShape)
    setRecommendations(faceShapeRecommendations)

    // Simulate loading
    const timer = setTimeout(() => {
      setLoading(false)
    }, 1000)

    return () => clearTimeout(timer)
  }, [searchParams, faceShape])

  const handleDownload = () => {
    // Create a simple text representation of the results
    const resultsText = `
Face Shape Analysis Results
--------------------------
Face Shape: ${faceShape}
Description: ${recommendations?.description || ""}

Recommended Frames:
${recommendations?.frames?.join(", ") || ""}

Recommended Colors:
${recommendations?.colors?.join(", ") || ""}

Frames to Avoid:
${recommendations?.avoid?.join(", ") || ""}

Analysis Type: ${analysisType === "detailed" ? "Detailed Analysis" : "Simple Analysis"}
Generated by NextWear.ai
    `.trim()

    // Create a blob and download it
    const blob = new Blob([resultsText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `face-shape-analysis-${faceShape.toLowerCase()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    addToast("Results downloaded successfully", "success")
  }

  const handleShare = async () => {
    const shareText = `I just discovered my face shape is ${faceShape} using NextWear.ai! Check out your face shape and get personalized eyewear recommendations.`

    try {
      if (navigator.share) {
        await navigator.share({
          title: "My Face Shape Analysis Results",
          text: shareText,
          url: window.location.href,
        })
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(`${shareText} ${window.location.href}`)
        addToast("Results copied to clipboard", "success")
      }
    } catch (error) {
      console.error("Error sharing results:", error)
      addToast("Failed to share results", "error")
    }
  }

  const handlePrint = () => {
    window.print()
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-xl">Analyzing your results...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="flex items-center mb-6">
        <Link
          href="/analyzer"
          className="mr-4 p-2 rounded-full bg-gray-200 dark:bg-gray-800 hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors"
        >
          <ArrowLeft className="h-5 w-5" />
        </Link>
        <h1 className="text-2xl font-bold">Your Face Analysis Results</h1>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-center mb-4">
          <span
            className={`px-3 py-1 rounded-full text-sm font-medium ${
              analysisType === "detailed"
                ? "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300"
                : "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
            }`}
          >
            {analysisType === "detailed" ? "Detailed Analysis" : "Simple Analysis"}
          </span>
        </div>

        <div className="text-center mb-6">
          <div
            className={`w-32 h-32 mx-auto mb-4 rounded-full flex items-center justify-center
            ${faceShape === "Oval" ? "bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400" : ""}
            ${faceShape === "Round" ? "bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400" : ""}
            ${faceShape === "Square" ? "bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400" : ""}
            ${faceShape === "Heart" ? "bg-pink-100 dark:bg-pink-900/30 text-pink-600 dark:text-pink-400" : ""}
            ${faceShape === "Diamond" ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400" : ""}
            ${faceShape === "Rectangle" ? "bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400" : ""}
            ${faceShape === "Triangle" ? "bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400" : ""}
          `}
          >
            <span className="text-2xl font-bold">{faceShape}</span>
          </div>
          <h2 className="text-xl font-semibold mb-2">Your Face Shape: {faceShape}</h2>
          <p className="text-gray-600 dark:text-gray-400">{recommendations?.description}</p>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-medium mb-3">Recommended Frame Styles</h3>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
            {recommendations?.frames.map((style: string) => (
              <div key={style} className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg text-center">
                <p className="font-medium">{style}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-medium mb-3">Recommended Colors</h3>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
            {recommendations?.colors.map((color: string) => (
              <div key={color} className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg text-center">
                <p className="font-medium">{color}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-medium mb-3">Frames to Avoid</h3>
          <div className="grid grid-cols-2 gap-3">
            {recommendations?.avoid.map((style: string) => (
              <div key={style} className="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg text-center">
                <p className="font-medium text-red-600 dark:text-red-400">{style}</p>
              </div>
            ))}
          </div>
        </div>

        {analysisType === "detailed" && (
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
            <h3 className="text-lg font-medium mb-3">Detailed Measurements</h3>
            <div className="grid grid-cols-2 gap-3 mb-4">
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <p className="text-sm text-gray-500 dark:text-gray-400">Face Width</p>
                <p className="text-lg font-semibold">{(Math.random() * 3 + 13).toFixed(1)} cm</p>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <p className="text-sm text-gray-500 dark:text-gray-400">Face Height</p>
                <p className="text-lg font-semibold">{(Math.random() * 4 + 18).toFixed(1)} cm</p>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <p className="text-sm text-gray-500 dark:text-gray-400">Jawline Width</p>
                <p className="text-lg font-semibold">{(Math.random() * 2 + 10).toFixed(1)} cm</p>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <p className="text-sm text-gray-500 dark:text-gray-400">Forehead Width</p>
                <p className="text-lg font-semibold">{(Math.random() * 2 + 11).toFixed(1)} cm</p>
              </div>
            </div>

            <h3 className="text-lg font-medium mb-3">Face Shape Confidence</h3>
            <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-4">
              <div className="flex justify-between mb-1">
                <span className="text-sm font-medium">{faceShape}</span>
                <span className="text-sm font-medium">{Math.floor(Math.random() * 20 + 80)}%</span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2.5">
                <div
                  className="bg-blue-600 h-2.5 rounded-full"
                  style={{ width: `${Math.floor(Math.random() * 20 + 80)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                Alternative shapes:{" "}
                {faceShape === "Oval"
                  ? "Heart, Rectangle"
                  : faceShape === "Round"
                    ? "Oval, Square"
                    : faceShape === "Square"
                      ? "Round, Rectangle"
                      : faceShape === "Heart"
                        ? "Oval, Diamond"
                        : faceShape === "Diamond"
                          ? "Heart, Triangle"
                          : faceShape === "Rectangle"
                            ? "Square, Oval"
                            : "Oval, Diamond"}
              </p>
            </div>
          </div>
        )}

        {/* Action buttons */}
        <div className="flex flex-wrap gap-3 justify-center mt-6 print:hidden">
          <button
            onClick={handleDownload}
            className="flex items-center gap-2 px-4 py-2 bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-800/30 transition-colors"
          >
            <Download className="w-4 h-4" />
            <span>Download</span>
          </button>

          <button
            onClick={handleShare}
            className="flex items-center gap-2 px-4 py-2 bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300 rounded-lg hover:bg-green-200 dark:hover:bg-green-800/30 transition-colors"
          >
            <Share2 className="w-4 h-4" />
            <span>Share</span>
          </button>

          <button
            onClick={handlePrint}
            className="flex items-center gap-2 px-4 py-2 bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300 rounded-lg hover:bg-purple-200 dark:hover:bg-purple-800/30 transition-colors"
          >
            <Printer className="w-4 h-4" />
            <span>Print</span>
          </button>
        </div>
      </div>

      <div className="flex justify-center">
        <Link
          href="/frames"
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors print:hidden"
        >
          Browse Recommended Frames
        </Link>
      </div>
    </div>
  )
}
